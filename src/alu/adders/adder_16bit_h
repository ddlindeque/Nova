#ifndef ADDER_16BIT
#define ADDER_16BIT

#include <functional>

#include <half_adder.h>
#include <full_adder.h>
#include <types.h>

/*
    Adding a15 a14 a13 .. a2 a1 a0 to b15 b14 b13 .. b2 b1 b0
    halfadder a0 b0 => digit + carry
    fulladde a1 b1 carry => digit + carry
    fulladde a2 b2 carry => digit + carry
    ...
    fulladder a15 b15 carry => digit carry
*/

struct adder_16bit_prototype
{
    void operator()(b16 input1, b16 input2, const std::function<void(b16, bool)> &callback) {
        bool digits[16], carry;
        half_adder()(input1&0x0001, input2&0x0001,        [&digits, &carry](const bool &d, const bool &c){digits[0]=d; carry = c;});
        full_adder()(input1&0x0002, input2&0x0002, carry, [&digits, &carry](const bool &d, const bool &c){digits[1]=d; carry = c;});
        full_adder()(input1&0x0004, input2&0x0004, carry, [&digits, &carry](const bool &d, const bool &c){digits[2]=d; carry = c;});
        full_adder()(input1&0x0008, input2&0x0008, carry, [&digits, &carry](const bool &d, const bool &c){digits[3]=d; carry = c;});
        full_adder()(input1&0x0010, input2&0x0010, carry, [&digits, &carry](const bool &d, const bool &c){digits[4]=d; carry = c;});
        full_adder()(input1&0x0020, input2&0x0020, carry, [&digits, &carry](const bool &d, const bool &c){digits[5]=d; carry = c;});
        full_adder()(input1&0x0040, input2&0x0040, carry, [&digits, &carry](const bool &d, const bool &c){digits[6]=d; carry = c;});
        full_adder()(input1&0x0080, input2&0x0080, carry, [&digits, &carry](const bool &d, const bool &c){digits[7]=d; carry = c;});
        full_adder()(input1&0x0100, input2&0x0100, carry, [&digits, &carry](const bool &d, const bool &c){digits[8]=d; carry = c;});
        full_adder()(input1&0x0200, input2&0x0200, carry, [&digits, &carry](const bool &d, const bool &c){digits[9]=d; carry = c;});
        full_adder()(input1&0x0400, input2&0x0400, carry, [&digits, &carry](const bool &d, const bool &c){digits[10]=d; carry = c;});
        full_adder()(input1&0x0800, input2&0x0800, carry, [&digits, &carry](const bool &d, const bool &c){digits[11]=d; carry = c;});
        full_adder()(input1&0x1000, input2&0x1000, carry, [&digits, &carry](const bool &d, const bool &c){digits[12]=d; carry = c;});
        full_adder()(input1&0x2000, input2&0x2000, carry, [&digits, &carry](const bool &d, const bool &c){digits[13]=d; carry = c;});
        full_adder()(input1&0x4000, input2&0x4000, carry, [&digits, &carry](const bool &d, const bool &c){digits[14]=d; carry = c;});
        full_adder()(input1&0x8000, input2&0x8000, carry, [&digits, &carry](const bool &d, const bool &c){digits[15]=d; carry = c;});

    }
};

struct adder_16bit
{
    void operator()(b16 input1, b16 input2, const std::function<void(b16, bool)> &callback) {
        auto r = input1 + input2;
        b16 result = r & 0xFFFF;
        bool carry = r - result != 0;
        callback(result, carry);
    }
};


#endif